placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
# out
plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$result <- renderTable({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
# out
plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$result <- renderTable({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$result <- renderTable({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$result <- renderTable({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
output$result <- renderText({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login')
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
observe(input$hash,{
output$result <- renderText({
if (isolate({input$id_text})==isolate({input$pw_text})) {
return('Success!')
}
else return('Failed!')
})
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
observe(input$hash, {
output$result <- renderText({
if (isolate({input$id_text})==isolate({input$pw_text})) {
return('Success!')
}
else return('Failed!')
})
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
eventReactive(input$hash, {
output$result <- renderText({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
eventReactive(input$hash, {
output$result <- renderText({
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
data <-eventReactive(input$hash, {
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
output$result <- data()
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
data <-eventReactive(input$hash, {
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
output$result <- renderText({data()})
}
shinyApp(ui= ui, server = server)
#==============================================================================
#
#                         Program Start
#
#==============================================================================
#
library(shiny)
ui <- fluidPage(
# in
#   sliderInput(inputId = 'num',
#               label = 'Choose a number',
#               value = 25, min = 1, max = 100),
textInput(inputId = 'id_text',
label = 'Username',
value = 'no input text found!',
width = '100px',
placeholder = 'Username'),
passwordInput(inputId = 'pw_text',
label = 'Password',
value = '',
width = '100px'),
actionButton(inputId = 'hash',
label = 'Login'),
# out
# plotOutput('hist'),
textOutput('result')
)
server <- function(input, output) {
#   output$hist <- renderPlot({
#     hist(rnorm(input$num))
#   })
data <-eventReactive(input$hash, {
if (input$id_text==input$pw_text) {
return('Success!')
}
else return('Failed!')
})
output$result <- renderText({data()})
}
shinyApp(ui= ui, server = server)
setwd("~/Google Drive/[DBB213]Data Visualization/06 D3/d")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
loadJSON('_Final_listofDeath.json')
fromJSON('_Final_listofDeath.json')
inpsect <-fromJSON('_Final_listofDeath.json')
tbl_df(inspect)
inspect <- inpsect
tbl_df(inspect)
View(inpsect)
unique(inspect$origin)
typeof(inspect$originLat)
inspect[inspect$originLat > 53, inspect$originLng < 27]
inspect[inspect$originLat > 53]
inspect[originLat > 53]
inspect[inspect$originLat > 53 | inspect$originLng < 27]
inspect[inspect$originLat > 7]
filter(inspect, inpsect$originLat>53)
filter(inspect, inpsect$originLat>53 | inpsect$originLng <27)
filter(inspect, inpsect$originLat>53 & inpsect$originLng <27)
i2 <- filter(inspect, inpsect$originLat>53 & inpsect$originLng <27)
View(i2)
i2 <- filter(inspect, inpsect$originLat <-53 & inpsect$originLng >27)
i2 <- filter(inspect, inpsect$originLat > 27 & inpsect$originLng < -53)
i2 <- filter(inspect, inpsect$originLat < -53 & inpsect$originLng >27)
i2 <- filter(inspect, inpsect$originLat < -53 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < -53 & inpsect$originLng > 27)
inpsect
i2 <- filter(inspect, inpsect$originLat < -53 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < -63 & inpsect$originLng > 27)
filter(inspect, inpsect$originLat < -63 & inpsect$originLng > 27)
filter(inspect, inpsect$originLat < 63 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 63 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < -63 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < -30 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 0 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 10 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 3 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 3 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 3 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 10 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 3 & inpsect$originLng > 27)
i2 <- filter(inspect, inpsect$originLat < 2 & inpsect$originLng > 27)
typeof(inspect$originLat)
typeof(inspect$originLng)
i2 <- filter(inspect, inpsect$originLat < 2)
i2 <- filter(inspect, inpsect$originLat < -63)
i2 <- filter(inspect, inpsect$originLat < -33)
i2 <- filter(inspect, inpsect$originLat < -13)
View(inpsect)
typeof(inspect$originLat)
eval(inpsect$originLat)
View(inspect)
i3 <- filter(inspect, inpsect$origin != 'unknown')
write(toJSON(i3),'c1.json')
i3 <- filter(inspect, inpsect$origin != 'unknown' | inspect$originLat != 'NA')
i3 <- filter(inspect, inpsect$origin != 'unknown' & inspect$originLat != 'NA')
i3 <- filter(inspect, inpsect$origin != 'unknown' & inspect$originLat != 'NA' & inspect$deathLat != 'NA')
write(toJSON(i3),'c_death.json')
